services:
  ### DATABASE
  database:
    image: mariadb:latest
    environment:
      MARIADB_RANDOM_ROOT_PASSWORD: 1
      MARIADB_USER: "${DB_USER}"
      MARIADB_PASSWORD: "${DB_PASS}"
      MARIADB_DATABASE: "${DB_NAME}"
    volumes:
      - "./database/backups/:/backup:rw"
      - "./database/mariadb-data/:/var/lib/mysql/:rw"
    expose:
      - 3306
    ports:
      - "3306:3306"
    networks:
      local:
    healthcheck:
      test: >
        sh -c '
        mariadb-dump -u$${MARIADB_USER} -p$${MARIADB_PASSWORD} $${MARIADB_DATABASE} > /backup/last_dump.sql 2>/backup/dump_error.log;
        if [ $$? -eq 0 ]; then
        gzip /backup/last_dump.sql -c > /backup/$$(date -I)-dump.gz;
        rm /backup/last_dump.sql;
        exit 0;
        else
        exit 1;
        fi
        '
      interval: 30m
      retries: 3

  ### BACK
  calculator:
    image: danielgreen1806/calculator-backend:${DOCKER_PROD_IMAGES_TAG}
    env_file:
      - ".env"
    expose:
      - 8080
    networks:
      local:
    command:
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8080"
  auth:
    image: danielgreen1806/auth-backend:${DOCKER_PROD_IMAGES_TAG}
    env_file:
      - ".env"
    expose:
      - 8081
    networks:
      local:
    command:
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8081"
  backadmin:
    image: danielgreen1806/admin-backend:${DOCKER_PROD_IMAGES_TAG}
    env_file:
      - ".env"
    expose:
      - 8082
    networks:
      local:
    command:
      - "--host"
      - "0.0.0.0"
      - "--port"
      - "8082"

  ### PROXY
  reverseproxy:
    depends_on:
      calculator:
        condition: service_started
      auth:
        condition: service_started
      backadmin:
        condition: service_started
    image: danielgreen1806/calculator-reverseproxy:${DOCKER_PROD_IMAGES_TAG}
    env_file:
      - ".env"
    restart: unless-stopped
    networks:
      local:
    ports:
      - "${APP_PORT}:80"

  ### WATCHTOWER
  watchtower:
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 180 --cleanup

networks:
  local:
